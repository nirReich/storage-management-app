{"version":3,"sources":["Componants/SignIn.js","Componants/SingUp.js","Componants/Product.js","Componants/Welcom.js","Componants/LogIn.js","Componants/Manager.js","App.js","serviceWorker.js","index.js"],"names":["SignIn","props","style","backgroundColor","to","color","borderRadius","SingUp","useState","workerNum","workerName","forkLift","entries","worker","setWorker","setData","e","data","target","value","id","type","onChange","name","htmlFor","checked","onClick","addWorkerToList","Product","obj","prodNum","prodName","needFork","removeProdFromList","index","Welcom","inPlace","products","setProducts","currentWorker","filter","element","i","alert","forklift","map","key","LogIn","flag","setFlag","setCurrentWorker","pathLink","setpathLink","passCurrentWorker","num","workers","length","countEntries","placeholder","Manager","App","setWorkers","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0e26b0c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nexport default function SignIn(props) {\r\n    return (\r\n        <div style={{backgroundColor:\"lightgray\"}}>\r\n            <h2>Logistical Management</h2>\r\n            <br/>\r\n            \r\n            <Link to={'/singup'}><button style={{backgroundColor:\"blue\",color:\"white\", borderRadius:\"5px\"}}>Sign Up</button></Link>\r\n            <br/>\r\n            <Link to={'/login'}><button style={{backgroundColor:\"blue\",color:\"white\", borderRadius:\"5px\"}} >Log In</button></Link>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport {Link } from \"react-router-dom\";\r\n\r\nexport default function SingUp(props) {\r\n    const [worker, setWorker] = useState({ workerNum: '', workerName: '', forkLift: false, entries: '' });\r\n\r\n    let setData = (e) => {\r\n        let data=e.target.value\r\n        if (e.target.id === \"number\") {\r\n            \r\n           \r\n            setWorker({...worker,workerNum:data})\r\n        }\r\n        else if (e.target.id === \"fullName\") {\r\n            setWorker({...worker,workerName:data})\r\n        }\r\n        else {\r\n            setWorker({...worker,forkLift:data})\r\n        }\r\n    }\r\n\r\n    let addWorker =()=>{\r\n        props.addWorkerToList(worker)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <p>no.</p>\r\n            <input type=\"text\" id=\"number\" onChange={setData} />\r\n            <p>FullName</p>\r\n            <input type=\"text\" id=\"fullName\" onChange={setData} />\r\n            <br />\r\n            <p>forklift truck:</p>\r\n            <input type=\"radio\" name=\"fork\" id=\"yes\" value={true} onChange={setData} />\r\n            <label htmlFor=\"yes\">yes</label>\r\n            <input type=\"radio\" name=\"fork\" id=\"no\" value={false} checked=\"checked\" onChange={setData} />\r\n            <label htmlFor=\"no\">no</label>\r\n            <br />\r\n            <br />\r\n            <Link to={'/'}><button onClick={addWorker}>Create</button></Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Product(props) {\r\n\r\nlet needForkLift = ()=>{\r\n    if (props.obj.needFork) {\r\n        return 'yes'\r\n    }\r\n    else{\r\n        return 'no'\r\n    }\r\n}\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n            No. {props.obj.prodNum}\r\n            <br/>\r\n            name: {props.obj.prodName}\r\n            <br/>\r\n            need forklift truck: {needForkLift()}\r\n            <br/>\r\n            <button onClick={()=>{props.removeProdFromList(props.index, props.obj.needFork,)}}>update</button>\r\n\r\n            </h3>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Product from './Product'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Welcom(props) {\r\n\r\n    const [products, setProducts] = useState([\r\n        { prodNum: 11122, prodName: 'green Box', needFork: false, inPlace: false },\r\n        { prodNum: 22554, prodName: 'green Box', needFork: false, inPlace: false },\r\n        { prodNum: 66698, prodName: 'blue Box', needFork: true, inPlace: false },\r\n        { prodNum: 78544, prodName: 'red Box', needFork: false, inPlace: false },\r\n        { prodNum: 69875, prodName: 'red Box', needFork: false, inPlace: false }\r\n    ])\r\n\r\n    const removeProdFromList = (index,needFork) => {\r\n        if (needFork) {\r\n            if (props.currentWorker.forkLift) {\r\n                setProducts(products.filter((element, i) => (i !== index)));\r\n            }\r\n            else {\r\n                alert('worker need forklift license!')\r\n            }\r\n        }\r\n        else {\r\n            setProducts(products.filter((element, i) => (i !== index)));\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    const forkliftLicence = () => {\r\n        if (props.currentWorker.forklift) {\r\n            return 'yes'\r\n        }\r\n        else {\r\n            return 'no'\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h1>Welcom {props.currentWorker.workerName}</h1>\r\n            <h3>Details:</h3>\r\n            <h3>Full name: {props.currentWorker.workerName}</h3>\r\n            <h3>no. {props.currentWorker.workerNum}</h3>\r\n            <h3>forklift truck license: {forkliftLicence()}</h3>\r\n            <br />\r\n            <h1>List of Products</h1>\r\n            {products.map((e, index) => {\r\n                return (\r\n                    <div>\r\n                        <Product removeProdFromList={removeProdFromList} index={index} key={index} obj={e} />\r\n\r\n                    </div>\r\n                )\r\n            })}\r\n            <br />\r\n            <Link to={'/'}><button>Log Out</button></Link>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Welcom from './Welcom'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function LogIn(props) {\r\n\r\n    const [flag, setFlag] = useState(false);\r\n    const [currentWorker, setCurrentWorker] = useState('')\r\n    const [pathLink, setpathLink] = useState(\"/login\")\r\n\r\n\r\n    const showWelcom = () => {//tried to change the flag and pass worker num on same onClick but couldent do so.\r\n\r\n        if (flag === false) {\r\n\r\n            return (\r\n                <div>\r\n                    <h1>Login</h1>\r\n                    <p>no.</p>\r\n                    <input type=\"text\" placeholder=\"Worker Number\" onChange={(e) => { passCurrentWorker(e.target.value) }} />\r\n                    <Link to={pathLink} > <button onClick={() => { setFlag(!flag) }}>Log In</button></Link>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n\r\n            return <Welcom currentWorker={currentWorker} products={props.products} removeProdFromList={props.removeProdFromList} />\r\n        }\r\n    }\r\n\r\n    const passCurrentWorker = (num) => {\r\n        for (let i = 0; i < props.workers.length; i++) {\r\n            \r\n            if (num === \"99999\") {\r\n                setpathLink(\"/manager\")\r\n            }\r\n            else if (props.workers[i].workerNum === num) {\r\n                props.countEntries(i)\r\n                setCurrentWorker(props.workers[i])\r\n                break\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //---------------------------------------------------------------------------------\r\n    return (\r\n        <div>\r\n\r\n            {showWelcom()}\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Manager(props) {\r\n    return (\r\n        <div>\r\n            <h1>Manager</h1>\r\n            <table>\r\n                <tr>\r\n                    <th>NO</th>\r\n                    <th>Full Name</th>\r\n                    <th>Counter</th>\r\n                </tr>\r\n                {props.workers.map((e,i)=>{\r\n                    return(\r\n                        <tr>\r\n                        <td>{e.workerNum}</td>\r\n                        <td>{e.workerName}</td>\r\n                        <td>{e.entries}</td>\r\n                    </tr>\r\n                    )\r\n                })}\r\n                <br/>\r\n                <br/>\r\n                <Link to={'/'}><button>Log Out</button></Link>\r\n\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SignIn from './Componants/SignIn'\nimport SingUp from './Componants/SingUp'\nimport LogIn from './Componants/LogIn';\nimport Manager from './Componants/Manager'\n\nfunction App() {\n\n  const [workers, setWorkers] = useState([{ workerNum: '12345', workerName: 'nir reich', forkLift: false, entries: 0 }]);\n  \n\n  const countEntries=(index)=>{\n   debugger\n    workers[index].entries = (workers[index].entries)+1;\n    setWorkers(workers);\n  }\n\n  const addWorkerToList=(worker)=>{\n    let flag = true;\n    for (let index = 0; index < workers.length; index++) { //tried to check workers num but didnt work.\n      if (workers[index].workerNum === worker.workerNum) {\n        flag=false\n      }\n    }\n    if (flag) {\n      setWorkers([...workers,{...worker}])\n    }\n    else{\n      alert('error!')\n    }\n\n  }\n\n  \n\n\n\n//-------------------------------------------------------------\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n\n          <Route exact path={'/'} component={() => { return <SignIn /> }} />\n          <Route exact path={'/singup'} component={() => { return <SingUp addWorkerToList={addWorkerToList} /> }} />\n          <Route exact path={'/login'} component={() => { return <LogIn countEntries={countEntries}  workers={workers} /> }} />\n          <Route exact path={'/manager'} component={() => { return <Manager workers={workers}/>}}/>\n\n\n\n\n        </Switch>\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}